-Para adaptar uno de su proyectos al nuestro:
	
Importar el proyecto a eclipse:

1-File -> Import

2-Click File > Import

3-Type Maven in the search box under Select an import source:

4-Select Existing Maven Projects

5-Click Next

6-Click Browse and select the folder that is the root of the Maven project (probably contains the pom.xml file)
	(Debería paracer que ha cogido el pom.xml, sale con un tic de correcto)
7-Click Finish



Modificar pom.xml

1-<artifactId> igual que el nombre del proyecto

2-<gropuId> aún no estoy seguro

3-<version> (no confundir con <modelVersion>) Ej: <version>1.0</version>

4-<packaging> se puede cambiar a 'jar' en vez de 'war', aunque creo que no es necesario

5-<name> nombre del proyecto

6-<url> la url del proyecto, aunque siempre es "http://maven.apache.org"


7-<properties> basicamente sirve para mantener más fácilmente el pom.xml
	-Ejemplo: <properties>
			<server.hostname>127.0.0.1</server.hostname>
			<server.port>8080</server.port>
		  </properties>
	
	En cualquier otra parte del pom.xml puedes hacer ${server.hostname} y cogerá el valor dado en properties.

8-<dependencies> archivos JAR, ZIP, ... que el proyecto necesita para runear, compilar, testear, ...
	cada archivo necesita un esquema:
		<dependency> 
			<groupId>
			<artifactId>
			<version>
			<scope> *Este es opcional, puedes especificar si solo se utiliza para una fase 
				EJ: Junit solo se utiliza en tests, entonces -> <scope>test</scope>
				Hay 6 fases -> compile, provided, runtime, test, system, import
				Si no se especifica <scope> se aplica en todas las fases
		</dependency>

9-<build> se ejecuta durante la construcción del proyecto, no es necesario declarar uno

10-En <profiles> cambiar <mainClass> por la nuestra, le podemos pasar los argumentos que queramos con meter nuevos en <arguments>
	
	-Se pueden hacer diferentes <profiles> para ejecutar diferentes <mainClass> con diferentes argumentos
	-Para ejecutar un profile diferente -> 'mvn exec:java -nombrequesea'




IMPORTANTE

Tanto en <build> como en <profile> hay <plugins>. Cada <plugin> realiza un "trabajo"
Ejemplo:

	<build>
		<plugins>
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.7.0</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>
		</plugins>
	</build>
Esto lo que haría es que al "construir" el proyecto, "maven-compiler-plugin" pone la version de java a utilizar en la 1.8 (Java 8)
Para versiones más recientes (a partir de la 9) hay otra manera de hacerlo https://www.baeldung.com/maven-java-version
